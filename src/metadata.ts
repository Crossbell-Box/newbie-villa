/* eslint-disable */
export default async () => {
    const t = {
        ["crossbell.js/dist"]: await import("crossbell.js/dist"),
        ["./module/newbie/newbie-jwt/newbie-jwt.dto"]: await import("./module/newbie/newbie-jwt/newbie-jwt.dto"),
        ["./module/http/generated/emailUser.entity"]: await import("./module/http/generated/emailUser.entity"),
        ["./module/newbie/transaction/character/character.dto"]: await import("./module/newbie/transaction/character/character.dto"),
        ["./module/newbie/transaction/csb/csb.dto"]: await import("./module/newbie/transaction/csb/csb.dto"),
        ["./module/newbie/transaction/link/link.dto"]: await import("./module/newbie/transaction/link/link.dto"),
        ["./module/newbie/transaction/note/note.dto"]: await import("./module/newbie/transaction/note/note.dto"),
        ["./module/newbie/transaction/tip/tip.dto"]: await import("./module/newbie/transaction/tip/tip.dto"),
        ["./module/newbie/transaction/withdraw/withdraw.dto"]: await import("./module/newbie/transaction/withdraw/withdraw.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./module/http/generated/connect-emailUser.dto"), { "ConnectEmailUserDto": { email: { required: true, type: () => String }, characterId: { required: true, type: () => Number } } }], [import("./module/http/generated/create-emailUser.dto"), { "CreateEmailUserDto": { email: { required: false, type: () => String }, passwordHash: { required: false, type: () => String }, characterId: { required: false, type: () => Number }, characterWithdrawnAt: { required: true, type: () => Date }, characterWithdrawnTo: { required: true, type: () => String }, csb: { required: true, type: () => String }, createdAt: { required: false, type: () => Date }, updatedAt: { required: false, type: () => Date }, deletedAt: { required: true, type: () => Date } } }], [import("./module/http/generated/update-emailUser.dto"), { "UpdateEmailUserDto": { passwordHash: { required: true, type: () => String }, characterId: { required: true, type: () => Number }, characterWithdrawnAt: { required: true, type: () => Date }, characterWithdrawnTo: { required: true, type: () => String }, csb: { required: true, type: () => String }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date }, deletedAt: { required: true, type: () => Date } } }], [import("./module/http/generated/emailUser.entity"), { "EmailUserEntity": { email: { required: false, type: () => String }, characterId: { required: false, type: () => Number }, characterWithdrawnAt: { required: false, type: () => Date, nullable: true }, characterWithdrawnTo: { required: false, type: () => String, nullable: true }, csb: { required: false, type: () => String, nullable: true }, createdAt: { required: false, type: () => Date }, updatedAt: { required: false, type: () => Date }, deletedAt: { required: false, type: () => Date, nullable: true } } }], [import("./module/newbie/newbie-jwt/newbie-jwt.dto"), { "CharacterIdParam": { characterId: { required: true, type: () => Number } }, "EmailSignUpBody": { email: { required: true, type: () => String }, emailVerifyCode: { required: true, type: () => String }, password: { required: true, type: () => String, minLength: 8, maxLength: 32 }, characterName: { required: true, type: () => String } }, "EmailSignInBody": { email: { required: true, type: () => String }, password: { required: true, type: () => String } }, "TokenResponse": { token: { required: true, type: () => String } }, "SignupVerifyEmailBody": { email: { required: true, type: () => String } }, "VerifyEmailVerifyCodeBody": { email: { required: true, type: () => String }, code: { required: true, type: () => String } }, "SuccessResponse": { ok: { required: true, type: () => Boolean } }, "ResetPasswordBody": { email: { required: true, type: () => String }, emailVerifyCode: { required: true, type: () => String }, password: { required: true, type: () => String, minLength: 8, maxLength: 32 } } }], [import("./module/newbie/transaction/base/base.dto"), { "TransactionResponse": { transactionHash: { required: true, type: () => String }, data: { required: false } } }], [import("./module/newbie/transaction/character/character.dto"), { "SetHandleBody": { handle: { required: true, type: () => String, maxLength: 32, pattern: "/^[a-z0-9\\-\\_]+$/" } }, "SetHandleResponse": { data: { required: true, type: () => Boolean } }, "SetMetadataBody": { metadata: { required: true, type: () => t["crossbell.js/dist"].CharacterMetadata }, mode: { required: false, type: () => Object, default: "merge" } }, "SetMetadataResponse": { data: { required: true, type: () => String } }, "AddOperatorBody": { operator: { required: true, type: () => String } }, "AddOperatorResponse": { data: { required: true } }, "RemoveOperatorParam": { operator: { required: true, type: () => String } } }], [import("./module/newbie/transaction/csb/csb.dto"), { "GetCsbBalanceResponse": { balance: { required: true, type: () => String, nullable: true } } }], [import("./module/newbie/transaction/link/link.dto"), { "LinkCharacterParam": { toCharacterIdOrToAddress: { required: true, type: () => Object }, linkType: { required: true, type: () => String } }, "LinkCharacterBody": { data: { required: false } }, "LinkCharacterResponse": {}, "LinkCharactersInBatchBody": { toCharacterIds: { required: true, type: () => [Number] }, toAddresses: { required: true }, linkType: { required: true, type: () => String }, data: { required: false } }, "UnlinkCharacterParam": { toCharacterId: { required: true, type: () => Number }, linkType: { required: true, type: () => String } }, "UnlinkCharacterResponse": { data: { required: true, type: () => Boolean } }, "LinkNoteParam": { toCharacterId: { required: true, type: () => Number }, toNoteId: { required: true, type: () => Number }, linkType: { required: true, type: () => String } }, "LinkNoteBody": { data: { required: false } }, "LinkNoteResponse": {}, "UnlinkNoteParam": { toCharacterId: { required: true, type: () => Number }, toNoteId: { required: true, type: () => Number }, linkType: { required: true, type: () => String } }, "UnlinkNoteResponse": { data: { required: true, type: () => Boolean } } }], [import("./module/newbie/transaction/note/note.dto"), { "PostNoteBody": { metadata: { required: true, type: () => t["crossbell.js/dist"].NoteMetadata }, locked: { required: false, type: () => Boolean }, linkItemType: { required: false, type: () => Object } }, "PostNoteResponse": {}, "SetNoteMetadataBody": { metadata: { required: true, type: () => t["crossbell.js/dist"].NoteMetadata }, mode: { required: false, type: () => Object, default: "merge" } }, "SetNoteMetadataResponse": {}, "NoteIdParam": { noteId: { required: true, type: () => Number } }, "LockNoteResponse": { data: { required: true, type: () => Boolean } }, "DeleteNoteResponse": { data: { required: true, type: () => Boolean } } }], [import("./module/newbie/transaction/tip/tip.dto"), { "TipBody": { characterId: { required: true, type: () => Number }, noteId: { required: false, type: () => Number }, amount: { required: true, type: () => String } }, "TipResponse": { data: { required: true, type: () => Boolean } } }], [import("./module/newbie/transaction/withdraw/withdraw.dto"), { "GetWithdrawProofsResponse": { nonce: { required: true, type: () => Number }, expires: { required: true, type: () => Number }, proof: { required: true, type: () => String } } }]], "controllers": [[import("./module/otel/otel.controller"), { "OtelController": { "getMetrics": { type: String } } }], [import("./module/newbie/newbie-jwt/newbie-jwt.controller"), { "NewbieJwtController": { "signupVerifyEmail": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].SuccessResponse }, "signupVerifyEmailVerifyCode": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].SuccessResponse }, "signup": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].TokenResponse }, "signin": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].TokenResponse }, "resetPasswordVerifyEmail": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].SuccessResponse }, "resetPasswordVerifyEmailVerifyCode": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].SuccessResponse }, "resetPassword": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].SuccessResponse }, "me": { type: t["./module/http/generated/emailUser.entity"].EmailUserEntity }, "deleteAccount": {}, "getNewbieInfo": { type: Object }, "mastodonSignup": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].TokenResponse }, "mastodonGetAccount": { type: Object }, "wonderaSignup": { type: t["./module/newbie/newbie-jwt/newbie-jwt.dto"].TokenResponse } } }], [import("./module/newbie/transaction/character/character.controller"), { "NewbieCharacterController": { "setCharacterMetadata": { type: t["./module/newbie/transaction/character/character.dto"].SetMetadataResponse } } }], [import("./module/newbie/transaction/csb/csb.controller"), { "NewbieCsbController": { "getCsbBalance": { type: t["./module/newbie/transaction/csb/csb.dto"].GetCsbBalanceResponse }, "refillCsbBalance": { type: t["./module/newbie/transaction/csb/csb.dto"].GetCsbBalanceResponse } } }], [import("./module/newbie/transaction/link/link.controller"), { "NewbieLinkController": { "linkCharacter": { type: t["./module/newbie/transaction/link/link.dto"].LinkCharacterResponse }, "linkCharactersInBatch": { type: t["./module/newbie/transaction/link/link.dto"].LinkCharacterResponse }, "unlinkCharacter": { type: t["./module/newbie/transaction/link/link.dto"].UnlinkCharacterResponse }, "linkNote": { type: t["./module/newbie/transaction/link/link.dto"].LinkNoteResponse }, "unlinkNote": { type: t["./module/newbie/transaction/link/link.dto"].UnlinkNoteResponse } } }], [import("./module/newbie/transaction/note/note.controller"), { "NewbieNoteController": { "postNote": { type: t["./module/newbie/transaction/note/note.dto"].PostNoteResponse }, "setNoteMetadata": { type: t["./module/newbie/transaction/note/note.dto"].SetNoteMetadataResponse }, "lockNote": { type: t["./module/newbie/transaction/note/note.dto"].LockNoteResponse }, "deleteNote": { type: t["./module/newbie/transaction/note/note.dto"].LockNoteResponse } } }], [import("./module/newbie/transaction/tip/tip.controller"), { "NewbieTipController": { "setHandle": { type: t["./module/newbie/transaction/tip/tip.dto"].TipResponse } } }], [import("./module/newbie/transaction/withdraw/withdraw.controller"), { "NewbieWithdrawController": { "getWithdrawProofs": { type: t["./module/newbie/transaction/withdraw/withdraw.dto"].GetWithdrawProofsResponse } } }]] } };
};